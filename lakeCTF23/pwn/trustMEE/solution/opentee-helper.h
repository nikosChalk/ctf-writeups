// Generated by copying various declarations from the source code of Open-TEE
// Intention is to load it into ghidra

typedef uint32_t TEE_Result;

typedef TEE_Result TEEC_Result;

typedef struct {
	uint32_t timeLow;
	uint16_t timeMid;
	uint16_t timeHiAndVersion;
	uint8_t clockSeqAndNode[8];
} TEE_UUID;

typedef TEE_UUID TEEC_UUID;

/* clang-format off */
/* Client API return Codes */
#define TEEC_SUCCESS			0x00000000
#define TEEC_ERROR_GENERIC		0xFFFF0000
#define TEEC_ERROR_ACCESS_DENIED	0xFFFF0001
#define TEEC_ERROR_CANCEL		0xFFFF0002
#define TEEC_ERROR_ACCESS_CONFLICT	0xFFFF0003
#define TEEC_ERROR_EXCESS_DATA		0xFFFF0004
#define TEEC_ERROR_BAD_FORMAT		0xFFFF0005
#define TEEC_ERROR_BAD_PARAMETERS	0xFFFF0006
#define TEEC_ERROR_BAD_STATE		0xFFFF0007
#define TEEC_ERROR_ITEM_NOT_FOUND	0xFFFF0008
#define TEEC_ERROR_NOT_IMPLEMENTED	0xFFFF0009
#define TEEC_ERROR_NOT_SUPPORTED	0xFFFF000A
#define TEEC_ERROR_NO_DATA		0xFFFF000B
#define TEEC_ERROR_OUT_OF_MEMORY	0xFFFF000C
#define TEEC_ERROR_BUSY			0xFFFF000D
#define TEEC_ERROR_COMMUNICATION	0xFFFF000E
#define TEEC_ERROR_SECURITY		0xFFFF000F
#define TEEC_ERROR_SHORT_BUFFER		0xFFFF0010
#define TEEC_ERROR_TARGET_DEAD		0xFFFF3024

/* CLient API return Code Origins */
#define TEEC_ORIGIN_API			0x00000001
#define TEEC_ORIGIN_COMMS		0x00000002
#define TEEC_ORIGIN_TEE			0x00000003
#define TEEC_ORIGIN_TRUSTED_APP		0x00000004

/* Internal API return Code Origins */
#define TEE_ORIGIN_API			TEEC_ORIGIN_API
#define TEE_ORIGIN_COMMS		TEEC_ORIGIN_COMMS
#define TEE_ORIGIN_TEE			TEEC_ORIGIN_TEE
#define TEE_ORIGIN_TRUSTED_APP		TEEC_ORIGIN_TRUSTED_APP

/* Internal API return values */
#define TEE_SUCCESS			TEEC_SUCCESS
#define TEE_ERROR_GENERIC		TEEC_ERROR_GENERIC
#define TEE_ERROR_ACCESS_DENIED		TEEC_ERROR_ACCESS_DENIED
#define TEE_ERROR_CANCEL		TEEC_ERROR_CANCEL
#define TEE_ERROR_ACCESS_CONFLICT	TEEC_ERROR_ACCESS_CONFLICT
#define TEE_ERROR_EXCESS_DATA		TEEC_ERROR_EXCESS_DATA
#define TEE_ERROR_BAD_FORMAT		TEEC_ERROR_BAD_FORMAT
#define TEE_ERROR_BAD_PARAMETERS	TEEC_ERROR_BAD_PARAMETERS
#define TEE_ERROR_BAD_STATE		TEEC_ERROR_BAD_STATE
#define TEE_ERROR_ITEM_NOT_FOUND	TEEC_ERROR_ITEM_NOT_FOUND
#define TEE_ERROR_NOT_IMPLEMENTED	TEEC_ERROR_NOT_IMPLEMENTED
#define TEE_ERROR_NOT_SUPPORTED		TEEC_ERROR_NOT_SUPPORTED
#define TEE_ERROR_NO_DATA		TEEC_ERROR_NO_DATA
#define TEE_ERROR_OUT_OF_MEMORY		TEEC_ERROR_OUT_OF_MEMORY
#define TEE_ERROR_BUSY			TEEC_ERROR_BUSY
#define TEE_ERROR_COMMUNICATION		TEEC_ERROR_COMMUNICATION
#define TEE_ERROR_SECURITY		TEEC_ERROR_SECURITY
#define TEE_ERROR_SHORT_BUFFER		TEEC_ERROR_SHORT_BUFFER
#define TEE_ERROR_CORRUPT_OBJECT	0xF0100001
#define TEE_PENDING			0xFFFF2000
#define TEE_ERROR_TIMEOUT		0xFFFF3001
#define TEE_ERROR_OVERFLOW		0xFFFF300F
#define TEE_ERROR_TARGET_DEAD		TEEC_ERROR_TARGET_DEAD

#define TEE_ERROR_STORAGE_NO_SPACE	0xFFFF3041
#define TEE_ERROR_MAC_INVALID		0xFFFF3071
#define TEE_ERROR_SIGNATURE_INVALID	0xFFFF3072
#define TEE_ERROR_TIME_NOT_SET		0xFFFF5000
#define TEE_ERROR_TIME_NEEDS_RESET	0xFFFF5001

/* Session Login Methods */
#define TEEC_LOGIN_PUBLIC		0x00000000
#define TEEC_LOGIN_USER			0x00000001
#define TEEC_LOGIN_GROUP		0x00000002
#define TEEC_LOGIN_APPLICATION		0x00000004
#define TEEC_LOGIN_USER_APPLICATION	0x00000005
#define TEEC_LOGIN_GROUP_APPLICATION	0x00000006

typedef struct {
	uint32_t login;
	TEE_UUID uuid;
} TEE_Identity;


typedef union {
	struct {
		void* buffer;
		size_t size;
	} memref;
	struct {
		uint32_t a;
		uint32_t b;
	} value;
} TEE_Param;

typedef struct __TEE_TASessionHandle* TEE_TASessionHandle;

typedef struct __TEE_PropSetHandle* TEE_PropSetHandle;

/* clang-format off */
/* Paramater Types */
#define TEE_PARAM_TYPE_NONE		0x00000000
#define TEE_PARAM_TYPE_VALUE_INPUT	0x00000001
#define TEE_PARAM_TYPE_VALUE_OUTPUT	0x00000002
#define TEE_PARAM_TYPE_VALUE_INOUT	0x00000003
#define TEE_PARAM_TYPE_MEMREF_INPUT	0x00000005
#define TEE_PARAM_TYPE_MEMREF_OUTPUT	0x00000006
#define TEE_PARAM_TYPE_MEMREF_INOUT	0x00000007

/* Session Login Methods (core api) */
#define TEE_LOGIN_PUBLIC		0x00000000
#define TEE_LOGIN_USER			0x00000001
#define TEE_LOGIN_GROUP			0x00000002
#define TEE_LOGIN_APPLICATION		0x00000004
#define TEE_LOGIN_APPLICATION_USER	0x00000005
#define TEE_LOGIN_APPLICATION_GROUP	0x00000006
#define TEE_LOGIN_TRUSTED_APP		0xF0000000

/* Property Set Pseudo-Handle Constants */
#define TEE_PROPSET_CURRENT_TA		(TEE_PropSetHandle)0xFFFFFFFF
#define TEE_PROPSET_CURRENT_CLIENT	(TEE_PropSetHandle)0xFFFFFFFE
#define TEE_PROPSET_TEE_IMPLEMENTATION	(TEE_PropSetHandle)0xFFFFFFFD

#define TEE_ACCESS_READ			0x00000001
#define TEE_ACCESS_WRITE		0x00000002
#define TEE_ACCESS_ANY_OWNER		0x00000004

/* Memory Access Rights Constants */
#define TEE_MEMORY_ACCESS_READ		0x00000001
#define TEE_MEMORY_ACCESS_WRITE		0x00000002
#define TEE_MEMORY_ACCESS_ANY_OWNER	0x00000004

#define TEE_PARAM_TYPES(param0Type, param1Type, param2Type, param3Type) \
	((param0Type) | ((param1Type) << 4) | ((param2Type) << 8) | ((param3Type) << 12))

#define TEE_PARAM_TYPE_GET(paramsType, index) (((paramsType) >> (index * 4)) & 0xF)

/* Internal API: Table 6-10: List of Object Types */
typedef enum {
	TEE_TYPE_AES = 0xA0000010,
	TEE_TYPE_DES = 0xA0000011,
	TEE_TYPE_DES3 =	0xA0000013,
	TEE_TYPE_HMAC_MD5 = 0xA0000001,
	TEE_TYPE_HMAC_SHA1 = 0xA0000002,
	TEE_TYPE_HMAC_SHA224 = 0xA0000003,
	TEE_TYPE_HMAC_SHA256 = 0xA0000004,
	TEE_TYPE_HMAC_SHA384 = 0xA0000005,
	TEE_TYPE_HMAC_SHA512 = 0xA0000006,
	TEE_TYPE_RSA_PUBLIC_KEY = 0xA0000030,
	TEE_TYPE_RSA_KEYPAIR = 0xA1000030,
	TEE_TYPE_DSA_PUBLIC_KEY = 0xA0000031,
	TEE_TYPE_DSA_KEYPAIR = 0xA1000031,
	TEE_TYPE_DH_KEYPAIR = 0xA1000032,
	TEE_TYPE_ECDSA_PUBLIC_KEY = 0xA0000041,
	TEE_TYPE_ECDSA_KEYPAIR = 0xA1000041,
	TEE_TYPE_ECDH_PUBLIC_KEY = 0xA0000042,
	TEE_TYPE_ECDH_KEYPAIR = 0xA1000042,
	TEE_TYPE_GENERIC_SECRET = 0xA0000000,
	TEE_TYPE_CORRUPTED_OBJECT = 0xA00000BE,
	TEE_TYPE_DATA = 0xA00000BF
} object_type;

typedef enum {
	TEE_ATTR_SECRET_VALUE = 0xC0000000,
	TEE_ATTR_RSA_MODULUS = 0xD0000130,
	TEE_ATTR_RSA_PUBLIC_EXPONENT = 0xD0000230,
	TEE_ATTR_RSA_PRIVATE_EXPONENT = 0xC0000330,
	TEE_ATTR_RSA_PRIME1 = 0xC0000430,
	TEE_ATTR_RSA_PRIME2 = 0xC0000530,
	TEE_ATTR_RSA_EXPONENT1 = 0xC0000630,
	TEE_ATTR_RSA_EXPONENT2 = 0xC0000730,
	TEE_ATTR_RSA_COEFFICIENT = 0xC0000830,
	TEE_ATTR_DSA_PRIME = 0xD0001031,
	TEE_ATTR_DSA_SUBPRIME = 0xD0001131,
	TEE_ATTR_DSA_BASE = 0xD0001231,
	TEE_ATTR_DSA_PUBLIC_VALUE = 0xD0000131,
	TEE_ATTR_DSA_PRIVATE_VALUE = 0xC0000231,
	TEE_ATTR_DH_PRIME = 0xD0001032,
	TEE_ATTR_DH_SUBPRIME = 0xD0001132,
	TEE_ATTR_DH_BASE = 0xD0001232,
	TEE_ATTR_DH_X_BITS = 0xF0001332,
	TEE_ATTR_DH_PUBLIC_VALUE = 0xD0000132,
	TEE_ATTR_DH_PRIVATE_VALUE = 0xC0000232,
	TEE_ATTR_RSA_OAEP_LABEL = 0xD0000930,
	TEE_ATTR_RSA_PSS_SALT_LENGTH = 0xF0000A30,
	TEE_ATTR_ECC_PUBLIC_VALUE_X = 0xD0000141,
	TEE_ATTR_ECC_PUBLIC_VALUE_Y = 0xD0000241,
	TEE_ATTR_ECC_PRIVATE_VALUE = 0xC0000341,
	TEE_ATTR_ECC_CURVE = 0xF0000441
} obj_func_atribute;

typedef enum {
	TEE_ATTR_FLAG_VALUE = 0x20000000,
	TEE_ATTR_FLAG_PUBLIC = 0x10000000
} attr_id_flag;

typedef enum {
	TEE_ECC_CURVE_NIST_P192 = 0x00000001,
	TEE_ECC_CURVE_NIST_P224 = 0x00000002,
	TEE_ECC_CURVE_NIST_P256 = 0x00000003,
	TEE_ECC_CURVE_NIST_P384 = 0x00000004,
	TEE_ECC_CURVE_NIST_P521 = 0x00000005
} obj_ecc_curve;




/* Shared Memory Control Flags */
#define TEEC_MEM_INPUT			0x00000001
#define TEEC_MEM_OUTPUT			0x00000002

/* Paramater Types */
#define TEEC_NONE			0x00000000
#define TEEC_VALUE_INPUT		0x00000001
#define TEEC_VALUE_OUTPUT		0x00000002
#define TEEC_VALUE_INOUT		0x00000003
#define TEEC_MEMREF_TEMP_INPUT		0x00000005
#define TEEC_MEMREF_TEMP_OUTPUT		0x00000006
#define TEEC_MEMREF_TEMP_INOUT		0x00000007
#define TEEC_MEMREF_WHOLE		0x0000000C
#define TEEC_MEMREF_PARTIAL_INPUT	0x0000000D
#define TEEC_MEMREF_PARTIAL_OUTPUT	0x0000000E
#define TEEC_MEMREF_PARTIAL_INOUT	0x0000000F

/* Session Login Methods (client api) */
#define TEEC_LOGIN_PUBLIC		0x00000000
#define TEEC_LOGIN_USER			0x00000001
#define TEEC_LOGIN_GROUP		0x00000002
#define TEEC_LOGIN_APPLICATION		0x00000004
#define TEEC_LOGIN_USER_APPLICATION	0x00000005
#define TEEC_LOGIN_GROUP_APPLICATION	0x00000006

/* clang-format on */

/*!
 * \brief TEEC_Context Logical container linking the Client Application to a particular TEE
 */
typedef struct {
	void *imp;
} TEEC_Context;

/*!
 * \brief TEEC_Session Container linking a Client Application to a particular Trusted Application
 */
typedef struct {
	void *imp;
} TEEC_Session;

/*!
  * \brief TEEC_SharedMemory A shared memory block that has been registered or allocated
  */
typedef struct {
	void *buffer;   /*!< pointer to a memory buffer that is shared with TEE */
	size_t size;    /*!< The size of the memory buffer in bytes */
	uint32_t flags; /*!< bit vector that can contain TEEC_MEM_INPUT or TEEC_MEM_OUTPUT */
	void *imp;
} TEEC_SharedMemory;

/*!
 * \brief TEEC_TempMemoryReference A Temporary memorry Reference as used by \sa TEEC_Operation
 */
typedef struct {
	void *buffer; /*!< Pointer to the first byte of a buffer that needs to be referenced */
	size_t size;  /*!< Size of the referenced memory region */
} TEEC_TempMemoryReference;

/*!
 * \brief TEEC_RegisteredMemoryReference Uses a pre-registered memory or pre-allocated memory block
 */
typedef struct {
	TEEC_SharedMemory *parent; /*!< Either a whole or partial memory reference */
	size_t size;		   /*!< The size of the referenced memory region, in bytes */
	size_t offset;		   /*!< The offset in bytes of the referenced memory region */
} TEEC_RegisteredMemoryReference;

/*!
 * \brief TEEC_Value Defines a paramater that is not referencing shared memory
 */
typedef struct {
	uint32_t a; /*!< Paramater meaning is defined by the protocol between TA and Client */
	uint32_t b; /*!< Paramater meaning is defined by the protocol between TA and Client */
} TEEC_Value;

/*!
 * \brief TEEC_Parameter Defines a parameter of a \sa TEEC_Operation
 */
typedef union {
	TEEC_TempMemoryReference tmpref;
	TEEC_RegisteredMemoryReference memref;
	TEEC_Value value;
} TEEC_Parameter;

/*!
 * \brief TEEC_Operation Defines the payload of either an open session or invoke command
 */
typedef struct {
	uint32_t started;    /*!< Must set to zero if the client may try to cancel the operation */
	uint32_t paramTypes; /*!< Encodes the type of each paramater that is being transfered */
	TEEC_Parameter params[4]; /*!< an array of 4 possible paramaters to share with TA */
	/* TODO what should be done about the opaque type <implementation defined> section */
	void *imp;
} TEEC_Operation;

/*
 * 4GB default 32 bit- TODO this should be checked on platform basis, so should be possible
 * to define it it at compile time "-DTEEC_CONFIG_SHAREDMEM_MAX_SIZE=XXX"
 */
#ifndef TEEC_CONFIG_SHAREDMEM_MAX_SIZE
/*!
 * \brief TEEC_CONFIG_SHAREDMEM_MAX_SIZE The maximum size of a shared
 */
#define TEEC_CONFIG_SHAREDMEM_MAX_SIZE 0xFFFFFFFF
#endif

/*!
 * \brief TEEC_InitializeContext
 * \param name The name of the TEE to connect to
 * \param context The context taht will be initialized by this function call
 * \return TEEC_SUCCESS on success, or another Return Code on failure
 */
TEEC_Result TEEC_InitializeContext(const char *name, TEEC_Context *context);

/*!
 * \brief TEEC_FinalizeContext Finalizes an initialized context
 * \param context The initialized TEEC_Context that is to be finalized
 */
void TEEC_FinalizeContext(TEEC_Context *context);

/*!
 * \brief TEEC_RegisterSharedMemory
 * Register a block of existing Client Memory as a block of Shared Memory within the scope of
 * the specified TEEC_Context
 * \param context Must point to an initialized TEE_Context
 * \param sharedMem Must point to the shared memory region to be registered
 * \return TEEC_SUCCESS on success, TEEC_ERROR_OUT_OF_MEMORY when no memory or another Return Code
 */
TEEC_Result TEEC_RegisterSharedMemory(TEEC_Context *context, TEEC_SharedMemory *shared_mem);

/*!
 * \brief TEEC_AllocateSharedMemory
 * Allocate a new block of memory as a block of shared memory within the scope of the specified
 * TEEC_Context
 * \param context Must point to an initialized TEEC_Context
 * \param sharedMem Must point to the shared memory region definition to to be populated
 * The size field must be set to define the rquired size of the memory region and the flags field
 * must also be set to indicate the direction of flow for the memory.
 * \return TEEC_SUCCESS on success, TEEC_ERROR_OUT_OF_MEMORY when no memory or another Return Code
 */
TEEC_Result TEEC_AllocateSharedMemory(TEEC_Context *context, TEEC_SharedMemory *shared_mem);

/*!
 * \brief TEEC_ReleaseSharedMemory
 * Deregister or deallocate a previously initialized block of Shared Memory
 * \param sharedMem A pointer to a valid shared memory region
 */
void TEEC_ReleaseSharedMemory(TEEC_SharedMemory *shared_mem);

/*!
 * \brief TEEC_OpenSession
 * Open a new session between the client application and the specified Trusted Application
 * \param context A pointer to an initialized context
 * \param session A pointer to a Session structure to be populated
 * \param destination The UUID of the destination Trusted Application
 * \param connectionMethod The method used to connect as defined in Session Connecton Methods
 * \param connectionData Any data necessary to support the connection method choosen
 * \param operation An operation containing a set of parameters to exchange with the TA
 * \param returnOrigin The origin of the returned result
 * \return TEEC_SUCCEESS or another Return Code on error
 */
TEEC_Result TEEC_OpenSession(TEEC_Context *context, TEEC_Session *session,
			     const TEEC_UUID *destination, uint32_t connection_method,
			     void *connection_data, TEEC_Operation *operation,
			     uint32_t *return_origin);

/*!
 * \brief TEEC_CloseSession
 * Close an existing session to a Trusted Application
 * \param session A valid session to close
 */
void TEEC_CloseSession(TEEC_Session *session);

/*!
 * \brief TEEC_InvokeCommand
 * Run a specfic command within the session to the trusted application
 * \param session Must point to a valid open session
 * \param commandID Indicates the command which should be run within the trusted Application
 * \param operation Optional data to be sent with the command invocation
 * \param returnOrigin The origin of the returned result
 * \return TEEC_SUCCEESS or another Return Code on error
 */
TEEC_Result TEEC_InvokeCommand(TEEC_Session *session, uint32_t command_id,
			       TEEC_Operation *operation, uint32_t *return_origin);

/*!
 * \brief TEEC_RequestCancellation
 * Request the cancellation of a pending Open Session or Comand invocation operation
 * \param operation A pointer to the operation to be canceled
 */
void TEEC_RequestCancellation(TEEC_Operation *operation);

/*!
 * \brief TEEC_PARAM_TYPES Create a Paramater type that can be used with an operation
 * \param param0Type Type of parameter 0
 * \param param1Type Type of parameter 1
 * \param param2Type Type of parameter 2
 * \param param3Type Type of parameter 3
 * \return a uint32_t value that can be used in the operation to define the param types
 */
#define TEEC_PARAM_TYPES(param0Type, param1Type, param2Type, param3Type)                           \
	((param0Type) | ((param1Type) << 4) | ((param2Type) << 8) | ((param3Type) << 12))

/*!
 * \brief TEEC_PARAM_TYPE_GET retrieve a paramater type at a given index
 * \param paramsType The paramaters value that is retrieved from the operation
 * \param index The index of the parameter who's type is required.
 * \return The paramater type stored at that index
 */
#define TEEC_PARAM_TYPE_GET(paramsType, index) (((paramsType) >> (index * 4)) & 0xF)


#define PROPERTY_SEC_NAME ".ta_properties"

#define SET_TA_PROPERTIES(...)                                                                     \
	struct gpd_ta_config ta_pro __attribute__((section(PROPERTY_SEC_NAME))) = { __VA_ARGS__ };

/*!
* \brief The gpd_ta_config struct
* This structure defines the Standard Configuration Properties of an applet as outlined in
* table 4-11 of the Internal API spec
*/
struct gpd_ta_config
{
	TEE_UUID appID;
	size_t dataSize;
	size_t stackSize;
	bool singletonInstance;
	bool multiSession;
	bool instanceKeepAlive;
};


typedef enum {
	TEE_MODE_ENCRYPT = 0,
	TEE_MODE_DECRYPT = 1,
	TEE_MODE_SIGN = 2,
	TEE_MODE_VERIFY = 3,
	TEE_MODE_MAC = 4,
	TEE_MODE_DIGEST = 5,
	TEE_MODE_DERIVE = 6
} TEE_OperationMode;

typedef struct {
	uint32_t algorithm;
	uint32_t operationClass;
	uint32_t mode;
	uint32_t digestLength;
	uint32_t maxKeySize;
	uint32_t keySize;
	uint32_t requiredKeyUsage;
	uint32_t handleState;
} TEE_OperationInfo;

typedef struct {
	uint32_t keySize;
	uint32_t requiredKeyUsage;
} TEE_OperationInfoKey;

typedef struct {
	uint32_t algorithm;
	uint32_t operationClass;
	uint32_t mode;
	uint32_t digestLength;
	uint32_t keySize;
	uint32_t maxKeySize;
	uint32_t handleState;
	uint32_t operationState;
	uint32_t numberOfKeys;
	TEE_OperationInfoKey keyInformation[2];
} TEE_OperationInfoMultiple;

typedef enum {
	TEE_ALG_AES_ECB_NOPAD = 0x10000010,
	TEE_ALG_AES_CBC_NOPAD = 0x10000110,
	TEE_ALG_AES_CTR = 0x10000210,
	TEE_ALG_AES_CTS = 0x10000310,
	TEE_ALG_AES_XTS = 0x10000410,
	TEE_ALG_AES_CBC_MAC_NOPAD = 0x30000110,
	TEE_ALG_AES_CBC_MAC_PKCS5 = 0x30000510,
	TEE_ALG_AES_CMAC = 0x30000610,
	TEE_ALG_AES_CCM = 0x40000710,
	TEE_ALG_AES_GCM = 0x40000810,
	TEE_ALG_DES_ECB_NOPAD = 0x10000011,
	TEE_ALG_DES_CBC_NOPAD = 0x10000111,
	TEE_ALG_DES_CBC_MAC_NOPAD = 0x30000111,
	TEE_ALG_DES_CBC_MAC_PKCS5 = 0x30000511,
	TEE_ALG_DES3_ECB_NOPAD = 0x10000013,
	TEE_ALG_DES3_CBC_NOPAD = 0x10000113,
	TEE_ALG_DES3_CBC_MAC_NOPAD = 0x30000113,
	TEE_ALG_DES3_CBC_MAC_PKCS5 = 0x30000513,
	TEE_ALG_RSASSA_PKCS1_V1_5_MD5 = 0x70001830,
	TEE_ALG_RSASSA_PKCS1_V1_5_SHA1 = 0x70002830,
	TEE_ALG_RSASSA_PKCS1_V1_5_SHA224 = 0x70003830,
	TEE_ALG_RSASSA_PKCS1_V1_5_SHA256 = 0x70004830,
	TEE_ALG_RSASSA_PKCS1_V1_5_SHA384 = 0x70005830,
	TEE_ALG_RSASSA_PKCS1_V1_5_SHA512 = 0x70006830,
	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA1 = 0x70212930,
	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA224 = 0x70313930,
	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA256 = 0x70414930,
	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA384 = 0x70515930,
	TEE_ALG_RSASSA_PKCS1_PSS_MGF1_SHA512 = 0x70616930,
	TEE_ALG_RSAES_PKCS1_V1_5 = 0x60000130,
	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA1 = 0x60210230,
	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA224 = 0x60310230,
	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA256 = 0x60410230,
	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA384 = 0x60510230,
	TEE_ALG_RSAES_PKCS1_OAEP_MGF1_SHA512 = 0x60610230,
	TEE_ALG_RSA_NOPAD = 0x60000030,
	TEE_ALG_DSA_SHA1 = 0x70002131,
	TEE_ALG_DH_DERIVE_SHARED_SECRET = 0x80000032,
	TEE_ALG_MD5 = 0x50000001,
	TEE_ALG_SHA1 = 0x50000002,
	TEE_ALG_SHA224 = 0x50000003,
	TEE_ALG_SHA256 = 0x50000004,
	TEE_ALG_SHA384 = 0x50000005,
	TEE_ALG_SHA512 = 0x50000006,
	TEE_ALG_HMAC_MD5 = 0x30000001,
	TEE_ALG_HMAC_SHA1 = 0x30000002,
	TEE_ALG_HMAC_SHA224 = 0x30000003,
	TEE_ALG_HMAC_SHA256 = 0x30000004,
	TEE_ALG_HMAC_SHA384 = 0x30000005,
	TEE_ALG_HMAC_SHA512 = 0x30000006,
	TEE_ALG_ECDSA_SHA1 = 0x70001042,
	TEE_ALG_ECDSA_SHA224 = 0x70002042,
	TEE_ALG_ECDSA_SHA256 = 0x70003042,
	TEE_ALG_ECDSA_SHA384 = 0x70004042,
	TEE_ALG_ECDSA_SHA512 = 0x70005042,
	TEE_ALG_ECDH_DERIVE_SHARED_SECRET = 0x80000042
} algorithm_Identifier;

